/**
 * File:	include/controller/dialogs.ycp
 * Package:	Configuration of controller
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */
{
textdomain "s390";

import "Arch";
import "Label";
import "Mode";
import "Popup";
import "Progress";
import "Report";
import "Sequencer";
import "Wizard";
import "ZFCPController";

include "s390/zfcp/helps.ycp";

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(ZFCP_HELPS["read"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = ZFCPController::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(ZFCP_HELPS["write"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = ZFCPController::Write();
    return ret ? `next : `abort;
}

    // ------------------------------------------------------------------------------------

/**
 * Get the list of items for the table of ZFCP devices
 * @param min_chan integer minimal channel number
 * @param max_chan integer maximal channel number
 * @return a list of terms for the table
 */
list<term> GetZFCPDiskItems()
{
    map<integer, map<string, any> > devices = ZFCPController::GetFilteredDevices();

    list<term> items = [];

    items = (list<term>) maplist (integer k, map<string,any> d, devices, ``{
	string dev_name = (string)(d["dev_name"]:"");
	string channel = d["detail", "controller_id"]:"unknown";
	string wwpn = d["detail", "wwpn"]:"unknown";
	string fcp_lun = d["detail", "fcp_lun"]:"unknown";
	if (fcp_lun != "unknown")
	    fcp_lun = ZFCPController::HexNumSize (fcp_lun, 16);
	string selected = ZFCPController::selected[k]:false
	    // table cell
	    ? _("Yes")
	    : "-";

	term t = `item (`id (k), channel, wwpn, fcp_lun);
	return t;
    });
    return items;
}


/**
 * Restart the ZFCP-Dialog
 */
void ReloadZFCPDialog()
{
    ZFCPController::filter_min = (string) UI::QueryWidget(`min_chan, `Value);
    ZFCPController::filter_max = (string) UI::QueryWidget(`max_chan, `Value);

    ZFCPController::ProbeDisks ();

    list<term> items = GetZFCPDiskItems();

    UI::ChangeWidget(`id(`table), `Items, items);
    UI::ChangeWidget (`id (`delete), `Enabled, size (items) > 0);
    UI::SetFocus (`table);
}

/**
 * Show the ZFCP-Dialog
 */
void DisplayZFCPDialog()
{
    /* Minimal text for the help */
    string help = ZFCP_HELPS["disk_selection"]:"";

    /* Dialog caption */
    string caption = _("Configured ZFCP Devices");

    term header = `header(
	// table header
	`Right(_("Channel Number")),
	// table header
	`Right(_("WWPN")),
	// table header
	`Right(_("ZFCP-LUN"))
    );
    
    /* Dialog content */
    term content = `VBox(
	`HBox(
	    // text entry
	    `InputField(`id(`min_chan), `opt(`hstretch), _("Mi&nimum Channel"), ZFCPController::filter_min),
	    // text entry
	    `InputField(`id(`max_chan), `opt(`hstretch), _("Ma&ximum Channel"), ZFCPController::filter_max),
	    `VBox (
		`Label (""),
		// push button
		`PushButton (`id (`filter), _("&Filter"))
	    )
	),
	`HBox(
	    `Table(`id(`table), `opt(`notify), header, [])
	),
	`HBox(
	    `PushButton(`id(`add), Label::AddButton ()),
	    `PushButton(`id(`delete), Label::DeleteButton ()),
	    `HStretch ()
	)
    );

    y2debug("Content: %1\n", content);
        /* Apply the settings */
    Wizard::SetContentsButtons(caption, content, help, Label::BackButton(), Label::NextButton());
    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton() );

    UI::ChangeWidget(`id(`min_chan), `ValidChars, "0123456789abcdefABCDEF.");
    UI::ChangeWidget(`id(`max_chan), `ValidChars, "0123456789abcdefABCDEF.");
}


/**
 * Show the ZFCP-Dialog
 * @return symbol From the dialog
 */
define symbol ZFCPDialog () ``{
    DisplayZFCPDialog ();
    ReloadZFCPDialog ();

    any ret = nil;

    integer selected = 0;

    while (ret == nil)
    {
	ret = UI::UserInput();

	selected = (integer) UI::QueryWidget (`id (`table), `CurrentItem);

	if (ret == `filter) {
	    ReloadZFCPDialog ();
	    ret = nil;
	    continue;
	}
	else if (ret == `abort || ret == `cancel)
	{
	    // yes-no popup
	    if (! Popup::YesNo (_("Really leave the ZFCP device configuration without saving?
All changes will be lost.")))
	    {
		ret = nil;
	    }
	}
	else if (ret == `delete)
	{
	    map<string,any> descr = ZFCPController::devices[selected]:$[];
	    string dev_name = (string)(descr["dev_name"]:"");
	    string channel = descr["detail", "controller_id"]:"unknown";
	    string wwpn = descr["detail", "wwpn"]:"unknown";
	    string fcp_lun = descr["detail", "fcp_lun"]:"unknown";

	    // popup qestion, %1 is device name (eg. /dev/sda)
	    if (! Popup::YesNo (sformat (_("Remove device %1?"), dev_name)))
	    {
		ret = nil;
		continue;
	    }
	    if (Mode::config ())
	    {
		ZFCPController::devices
		    = remove (ZFCPController::devices, selected);
	    }
	    else
	    {
		ZFCPController::DeactivateDisk (channel, wwpn, fcp_lun);
	    }
	    ReloadZFCPDialog ();
	    ret = nil;
	}
    }
    if (ret == `add)
    {
	map<string,any> descr = ZFCPController::devices[selected]:$[];
	string dev_name = (string)(descr["dev_name"]:"");
	string channel = descr["controller_id"]:"unknown";
	string wwpn = descr["detail", "wwpn"]:"unknown";
	if (wwpn != "unknown")
	    ZFCPController::previous_settings["wwpn"] = wwpn;
    }
    return (symbol) ret;
}

/**
 * Add ZFCP-Dialog
 * @return symbol the dialog
 */
define symbol AddZFCPDiskDialog () ``{
    /* Minimal text for the help */
    string help = ZFCP_HELPS["disk_add"]:"";

    /* Dialog caption */
    string caption = _("Add New ZFCP Device");

    string fcp_lun = ZFCPController::previous_settings["fcp_lun"]:"";
    if (fcp_lun == nil || fcp_lun == "")
	fcp_lun = "0";
    integer i_lun = tointeger (fcp_lun);
    integer new_lun = i_lun;

    foreach (integer k, map<string,any> v, ZFCPController::devices, ``{
	if (i_lun == tointeger (v["detail", "fcp_lun"]:""))
	{
	    if (v["vendor"]:"" == "IBM" && v["device"]:"" == "25f03")
		new_lun = i_lun + tointeger ("0x100000000");
	    else
		new_lun = i_lun + 1;
	}
    });
    fcp_lun = tohexstring (new_lun);
    if (fcp_lun != "")
	fcp_lun = ZFCPController::HexNumSize (fcp_lun, 16);

    list<string>items = [];
    if (Mode::config ())
    {
	items = maplist (integer index, map<string,any> d,
	    ZFCPController::devices,
	{
	    return d["detail", "controller_id"]:"";
	});
	items = toset (items);
	items = filter (string i, items, ``(i != "" && i != nil));
    }
    else
    {
	items = maplist (map<string,any> c,
	    ZFCPController::GetControllers (),
	``{
	    string channel = c["sysfs_bus_id"]:"0.0.0000";
	    return channel;
	});
    }

    /* Dialog content */
    term content = `HBox (`HStretch (), `VBox(
	`VStretch (),
	`ComboBox (`id(`channel), `opt (`editable, `hstretch),
	    // combo box
	    _("&Channel Number"),
	    items),
	`VSpacing (2),
       `HBox(
         // text entry
         `ComboBox(`id(`wwpn), `opt(`hstretch, `editable), _("&WWPN"),
           [ ZFCPController::previous_settings["wwpn"]:"" ]),
         `PushButton(`id(`get_wwpn), _("Get WWPNs"))
            ),
	`VSpacing (2),
       `HBox(
	// text entry
        `ComboBox(`id(`fcp_lun), `opt(`hstretch, `editable), _("&FCP-LUN"), [ fcp_lun ]),
        `PushButton(`id(`get_lun), _("Get LUNs"))
            ),
	`VStretch ()
    ), `HStretch ());

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);
    Wizard::RestoreBackButton ();
    Wizard::RestoreAbortButton ();

    any ret = nil;

    while (ret == nil)
    {
	ret = UI::UserInput();

       if (ret == `get_wwpn){
        list<string> items = ZFCPController::GetWWPNs((string)UI::QueryWidget(`channel, `Value));
        UI::ChangeWidget(`wwpn, `Items, items);
        ret=nil;
       }
       else if (ret == `get_lun){
        list<string> items = ZFCPController::GetLUNs((string)UI::QueryWidget(`channel, `Value), (string)UI::QueryWidget(`wwpn, `Value));
        UI::ChangeWidget(`fcp_lun, `Items, items);
        ret=nil;
       }
       else if (ret == `abort || ret == `cancel)
	{
	    // yes-no popup
	    if (! Popup::YesNo (_("Really leave the ZFCP device configuration without saving?
All changes will be lost.")))
	    {
		ret = nil;
	    }
	}
	else if (ret == `next)
	{
	    string wwpn = (string)UI::QueryWidget (`id (`wwpn), `Value);
	    boolean ok = true;
	    if (substring (wwpn, 0, 2) != "0x")
		ok = false;
	    wwpn = substring (wwpn, 2);
	    if (size (wwpn) != 16)
		ok = false;
	    if (size (filterchars (wwpn, "1234567890abcdef")) != 16)
		ok = false;
	    if (! ok)
	    {
		// error report
		Report::Error (_("The entered WWPN is invalid."));
		UI::SetFocus (`wwpn);
		ret = nil;
	    }
	}
    }

    if (ret == `next)
    {
	string channel = (string)UI::QueryWidget (`id (`channel), `Value);
	string wwpn = (string)UI::QueryWidget (`id (`wwpn), `Value);
	string lun = (string)UI::QueryWidget (`id (`fcp_lun), `Value);
	ZFCPController::previous_settings["wwpm"] = wwpn;
	ZFCPController::previous_settings["fcp_lun"] = lun;
	ZFCPController::previous_settings["channel"] = channel;
	if (Mode::config ())
	{
	    map<string,any> m = $[
		"controller_id" : channel,
		"wwpn" : wwpn,
		"fcp_lun" : lun,
	    ];
	    m = $["detail" : m ];
	    integer index = -1;
	    while (haskey (ZFCPController::devices, index))
		index = index + 1;
	    ZFCPController::devices[index] = m;
	}
	else
	{
	    ZFCPController::ActivateDisk (channel, wwpn, lun);
	}
    }

    return (symbol) ret;

}

}

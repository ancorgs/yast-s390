/**
 * File:	include/controller/dialogs.ycp
 * Package:	Configuration of controller
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */
{
textdomain "s390";

import "Label";
import "Mode";
import "Popup";
import "Progress";
import "Report";
import "Sequencer";
import "Wizard";
import "ZFCPController";

include "s390/zfcp/helps.ycp";


    /**
     * List ZFCP devices that are currently being selected
     * @return list<integer> list of IDs of selected ZFCP devices
     */
    list<integer> ListSelectedZFCP()
    {
	list<integer> selected = (list<integer>) UI::QueryWidget(`id(`table), `SelectedItems);
	y2milestone("selected %1", selected);
	return selected;
    }


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog()
{
    Wizard::RestoreHelp(ZFCP_HELPS["read"]:"");
    boolean ret = ZFCPController::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog()
{
    Wizard::RestoreHelp(ZFCP_HELPS["write"]:"");
    boolean ret = ZFCPController::Write();
    return ret ? `next : `abort;
}


/**
 * Get the list of items for the table of ZFCP devices
 * @param min_chan integer minimal channel number
 * @param max_chan integer maximal channel number
 * @return a list of terms for the table
 */
list<term> GetZFCPDiskItems()
{
    map<integer, map<string, any> > devices = ZFCPController::GetFilteredDevices();

    list<term> items = [];

    items = maplist(integer k, map<string, any> d, devices, {
	string channel = d["detail", "controller_id"]:"unknown";
	string wwpn = d["detail", "wwpn"]:"unknown";
	string fcp_lun = d["detail", "fcp_lun"]:"unknown";
	return `item(`id(k), channel, wwpn, fcp_lun);
    });

    return items;
}


/**
 * Show the ZFCP-Dialog
 */
void DisplayZFCPDialog()
{
    /* Minimal text for the help */
    string help = ZFCP_HELPS["disk_selection"]:"";

    /* Dialog caption */
    string caption = _("Configured ZFCP Devices");

    term header = `header(
	// table header
	`Right(_("Channel Number")),
	// table header
	`Right(_("WWPN")),
	// table header
	`Right(_("ZFCP-LUN"))
    );

    /* Dialog content */
    term content = `VBox(
	`HBox(
	    // text entry
	    `InputField(`id(`min_chan), `opt(`hstretch), _("Mi&nimum Channel"), ZFCPController::filter_min),
	    // text entry
	    `InputField(`id(`max_chan), `opt(`hstretch), _("Ma&ximum Channel"), ZFCPController::filter_max),
	    `VBox (
		`Label (""),
		// push button
		`PushButton (`id (`filter), _("&Filter"))
	    )
	),
	`HBox(
	    `Table(`id(`table), `opt(`multiSelection), header, [])
	),
	`HBox(
	    `PushButton(`id(`add), Label::AddButton ()),
	    `PushButton(`id(`delete), Label::DeleteButton ()),
	    `HStretch ()
	)
    );

    Wizard::SetContentsButtons(caption, content, help, Label::BackButton(), Label::NextButton());
    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton() );

    UI::ChangeWidget(`id(`min_chan), `ValidChars, "0123456789abcdefABCDEF.");
    UI::ChangeWidget(`id(`max_chan), `ValidChars, "0123456789abcdefABCDEF.");
}


/**
 * Restart the ZFCP-Dialog
 */
void ReloadZFCPDialog()
{
    list<term> items = GetZFCPDiskItems();

    list<integer> selected = (list<integer>) UI::QueryWidget(`id(`table), `SelectedItems);
    UI::ChangeWidget(`id(`table), `Items, items);
    UI::ChangeWidget(`id(`table), `SelectedItems, selected);
    UI::SetFocus(`table);
}


/**
 * Show the ZFCP-Dialog
 * @return symbol From the dialog
 */
symbol ZFCPDialog()
{
    DisplayZFCPDialog ();
    ReloadZFCPDialog ();

    symbol ret = nil;
    while (ret == nil)
    {
	ret = (symbol) UI::UserInput();

	if (ret == `filter)
	{
	    string filter_min = (string) UI::QueryWidget(`min_chan, `Value);
	    string filter_max = (string) UI::QueryWidget(`max_chan, `Value);

	    if (!ZFCPController::IsValidChannel(filter_min) || !ZFCPController::IsValidChannel(filter_max))
	    {
		// error popup
		Popup::Error(_("Invalid filter channels."));
		ret = nil;
		continue;
	    }

	    ZFCPController::filter_min = ZFCPController::FormatChannel(filter_min);
	    ZFCPController::filter_max = ZFCPController::FormatChannel(filter_max);

	    ReloadZFCPDialog();
	    ret = nil;
	    continue;
	}
	else if (ret == `table)
	{
	    ret = nil;
	    continue;
	}
	else if (ret == `abort || ret == `cancel)
	{
	    // yes-no popup
	    if (! Popup::YesNo (_("Really leave the ZFCP device configuration without saving?
All changes will be lost.")))
	    {
		ret = nil;
	    }
	    continue;
	}
    }

    return ret;
}


/**
 * Add ZFCP-Dialog
 * @return symbol the dialog
 */
symbol AddZFCPDiskDialog()
{
    /* Minimal text for the help */
    string help = ZFCP_HELPS["disk_add"]:"";

    /* Dialog caption */
    string caption = _("Add New ZFCP Device");

    string fcp_lun = ZFCPController::previous_settings["fcp_lun"]:"";
    fcp_lun = ZFCPController::GetNextLUN(fcp_lun);

    list<string> items = [];
    if (Mode::config ())
    {
	items = maplist (integer index, map<string, any> d, ZFCPController::devices, {
	    return d["detail", "controller_id"]:"";
	});
	items = toset (items);
	items = filter (string i, items, { return i != "" && i != nil; });
    }
    else
    {
	items = maplist (map<string, any> c, ZFCPController::GetControllers(), {
	    string channel = c["sysfs_bus_id"]:"0.0.0000";
	    return channel;
	});
    }

    /* Dialog content */
    term content = `HBox (`HStretch (), `VBox(
	`VStretch (),
	`ComboBox (`id(`channel), `opt (`editable, `hstretch),
	    // combo box
	    _("&Channel Number"),
	    items),
	`VSpacing (2),
       `HBox(
         // text entry
         `ComboBox(`id(`wwpn), `opt(`hstretch, `editable), _("&WWPN"),
           [ ZFCPController::previous_settings["wwpn"]:"" ]),
         `PushButton(`id(`get_wwpn), _("Get WWPNs"))
            ),
	`VSpacing (2),
       `HBox(
	// text entry
        `ComboBox(`id(`fcp_lun), `opt(`hstretch, `editable), _("&FCP-LUN"), [ fcp_lun ]),
        `PushButton(`id(`get_lun), _("Get LUNs"))
            ),
	`VStretch ()
    ), `HStretch ());

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);
    Wizard::RestoreBackButton ();
    Wizard::RestoreAbortButton ();

    UI::ChangeWidget(`id(`channel), `ValidChars, "0123456789abcdefABCDEF.");
    UI::ChangeWidget(`id(`wwpn), `ValidChars, "0123456789abcdefABCDEFx");

    symbol ret = nil;
    while (ret == nil)
    {
	ret = (symbol) UI::UserInput();

       if (ret == `get_wwpn){
        list<string> items = ZFCPController::GetWWPNs((string)UI::QueryWidget(`channel, `Value));
        UI::ChangeWidget(`wwpn, `Items, items);
        ret=nil;
       }
       else if (ret == `get_lun){
        list<string> items = ZFCPController::GetLUNs((string)UI::QueryWidget(`channel, `Value), (string)UI::QueryWidget(`wwpn, `Value));
        UI::ChangeWidget(`fcp_lun, `Items, items);
        ret=nil;
       }
       else if (ret == `abort || ret == `cancel)
	{
	    // yes-no popup
	    if (! Popup::YesNo (_("Really leave the ZFCP device configuration without saving?
All changes will be lost.")))
	    {
		ret = nil;
	    }
	}
	else if (ret == `next)
	{
	    string channel = (string) UI::QueryWidget(`id(`channel), `Value);
	    string wwpn = (string) UI::QueryWidget(`id(`wwpn), `Value);
	    string fcp_lun = (string) UI::QueryWidget(`id(`fcp_lun), `Value);

	    if (!ZFCPController::IsValidChannel(channel))
	    {
		// error popup
		Popup::Error(_("Not a valid channel."));
		UI::SetFocus(`channel);
		ret = nil;
		continue;
	    }

	    if (!ZFCPController::IsValidWWPN(wwpn))
	    {
		// error popup
		Report::Error(_("The entered WWPN is invalid."));
		UI::SetFocus(`wwpn);
		ret = nil;
		continue;
	    }

	    if (!ZFCPController::IsValidFCPLUN(fcp_lun))
	    {
		// error popup
		Report::Error(_("The entered FCP-LUN is invalid."));
		UI::SetFocus(`fcp_lun);
		ret = nil;
		continue;
	    }
	}
    }

    if (ret == `next)
    {
	string channel = (string) UI::QueryWidget(`id(`channel), `Value);
	string wwpn = (string) UI::QueryWidget(`id(`wwpn), `Value);
	string lun = (string) UI::QueryWidget(`id(`fcp_lun), `Value);

	channel = ZFCPController::FormatChannel(channel);
	wwpn = ZFCPController::FormatWWPN(wwpn);
	lun = ZFCPController::FormatFCPLUN(lun);

	ZFCPController::previous_settings["channel"] = channel;
	ZFCPController::previous_settings["wwpn"] = wwpn;
	ZFCPController::previous_settings["fcp_lun"] = lun;

	if (Mode::config())
	{
	    map<string,any> m = $[
		"controller_id" : channel,
		"wwpn" : wwpn,
		"fcp_lun" : lun,
	    ];

	    m = $["detail" : m ];

	    ZFCPController::AddDevice(m);
	}
	else
	{
	    ZFCPController::ActivateDisk (channel, wwpn, lun);
	}
    }

    return ret;
}


/**
 * Run the dialog for deleting ZFCPs
 * @return symbol from DeleteZFCPDiskDialog
 */
symbol DeleteZFCPDiskDialog()
{
    list<integer> selected = ListSelectedZFCP();
    if (isempty(selected))
    {
	// error popup message
	Popup::Message (_("No disk selected."));
    }
    else
    {
	if (Mode::config())
	{
	    foreach(integer index, selected, { ZFCPController::RemoveDevice(index); });
	}
	else
	{
	    foreach(integer index, selected, {
		    map d = ZFCPController::devices[index]:$[];
		    string channel = d["detail", "controller_id"]:"unknown";
		    string wwpn = d["detail", "wwpn"]:"unknown";
		    string fcp_lun = d["detail", "fcp_lun"]:"unknown";
		    ZFCPController::DeactivateDisk(channel, wwpn, fcp_lun);
		});
	    
	    ZFCPController::ProbeDisks();
	}
    }
    
    return `next;
}

}

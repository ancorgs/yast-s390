/**
 * File:	include/controller/dialogs.ycp
 * Package:	Configuration of controller
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "s390";

import "Arch";
import "Label";
import "Popup";
import "Progress";
import "Report";
import "Sequencer";
import "Wizard";
import "ZFCPController";

include "s390/zfcp/helps.ycp";

/**
 * Translate integer number to its hexadecimal representation with leading
 * 0x and exactliy 4 hexadecimal numbers
 * @param i integer integer number
 * @return string hexadecimal number
 */
define string FourDigitHex(integer i) ``{
    string s = tohexstring(i);
    string zeros = "";

    integer l = 6 - size(s);

    while (l > 0) {
	zeros = zeros + "0";
	l = l - 1;
    }

    return substring(s, 0, 2) + zeros + substring(s, 2);
}

/**
 * Report error occured during device activation
 * @param id integer chanel id of the device
 * @param ret integer exit code of the operation
 */
define void ReportActivationError (string id, integer ret) {
    if (ret != 0)
    {

	if (ret == 1)
	    Report::Error (sformat (_("%1: sysfs not mounted"), id));
	else if (ret == 2)
	    Report::Error (sformat (_("%1: invalid value for <online>"), id));
	else if (ret == 3)
	    Report::Error (sformat (_("%1: device <ccwid> does not exist"), id));
	else if (ret == 4)
	    Report::Error (sformat (_("%1: module zfcp could not be loaded"), id));
	else if (ret == 5)
	    Report::Error (sformat (_("%1: adapter status could not be changed"), id));
	else if (ret == 6)
	   Report::Error (sformat (_("%1: wwpn ports still active"), id));
	else if (ret == 7)
	    Report::Error (sformat (_("%1: SCSI disk could not be deactivated"), id));
	else if (ret == 8)
	    Report::Error (sformat (_("%1: FCP LUN could not be deregistered"), id));
	else if (ret == 9)
	    Report::Error (sformat (_("%1: FCP WWPN could not be deregistered"), id));
	else
	    Report::Error (sformat (
		_("%1: Unknown error %2"), id, ret));
    }
}
/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(ZFCP_HELPS["read"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = ZFCPController::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(ZFCP_HELPS["write"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = ZFCPController::Write();
    return ret ? `next : `abort;
}


    // ------------------------------------------------------------------------------------


define list<term> GetZFCPDiskItems() ``{
    integer id = 0;

    list<term> items = [];

    map<integer,map<string,any> > devices = ZFCPController::devices;

    items = (list<term>) maplist (integer k, map<string,any> d, devices, ``{
	string dev_name = (string)(d["dev_name"]:"");
	string channel = d["controller_id"]:"unknown";
	string wwpn = d["wwpn"]:"unknown";
	string fcp_lun = d["fcp_lun"]:"unknown";
	string selected = ZFCPController::selected[k]:false
	    ? UI::Glyph (`CheckMark)
	    : "-";

	term t = `item (`id (k), channel, wwpn, fcp_lun);
	return t;
    });
    return items;
}

define void ReloadZFCPDialog () ``{
    ZFCPController::ProbeDisks ();

    list<term> items = GetZFCPDiskItems ();

    UI::ChangeWidget(`id(`table), `Items, items);
    UI::ChangeWidget (`id (`delete), `Enabled, size (items) > 0);
    UI::SetFocus (`table);
}

define void DisplayZFCPDialog () {

    /* Minimal text for the help */
    string help = _("Dialog for SCSI disks selection.");

    /* Dialog caption */
    string caption = _("Detected SCSI disks");

        list<term> items = GetZFCPDiskItems();

    /* Dialog content */
    term content = `VBox(
	`HBox(
	    `Table(
		`id(`table), `opt(`keepSorting, `notify),
		`header(
		    `Right(_("Channel number")),
		    `Right(_("wwpn")),
		    `Right(_("zfcp-LUN"))
		),
		[]
	    )
	),
	`HBox(
	    `PushButton(`id(`add), _("&Add")),
//                `PushButton(`id(`change), "&Change"),
	    `PushButton(`id(`delete), _("&Delete")),
	    `HStretch ()
	)
    );

    y2milestone("Content: %1\n", content);
        /* Apply the settings */
    Wizard::SetContentsButtons(caption, content, help, Label::BackButton(), Label::NextButton());
    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton() );
}

define symbol ZFCPDialog () ``{
    DisplayZFCPDialog ();
    ReloadZFCPDialog ();

    any ret = nil;

    integer selected = 0;

    while (ret == nil)
    {
	ret = UI::UserInput();

	selected = (integer) UI::QueryWidget (`id (`table), `CurrentItem);

/*	else if (ret == `table)
	{
	    ret = nil;
	}*/
	if (ret == `delete)
	{
	    map<string,any> descr = ZFCPController::devices[selected]:$[];
	    string dev_name = (string)(descr["dev_name"]:"");
	    string channel = descr["controller_id"]:"unknown";
	    string wwpn = descr["wwpn"]:"unknown";
	    string fcp_lun = descr["fcp_lun"]:"unknown";

	    if (! Popup::YesNo (sformat (_("Remove disk %1"), dev_name)))
	    {
		ret = nil;
		continue;
	    }
	    string command = sformat (
		"/sbin/zfcp_disk_configure %1 %2 %3 %4",
		channel,
		wwpn,
		fcp_lun,
		0
	    );
	    boolean run = true;
	    if (! Popup::YesNo (sformat (_("Execute command %1"), command)))
	    {
		run = false;
	    }
	    if (run)
	    {
		integer ret = (integer)SCR::Execute (.target.bash, command);
		ReportActivationError (channel, ret);
		ReloadZFCPDialog ();
	    }
	    ret = nil;
	}
    }
    if (ret == `add)
    {
	map<string,any> descr = ZFCPController::devices[selected]:$[];
	string dev_name = (string)(descr["dev_name"]:"");
	string channel = descr["controller_id"]:"unknown";
	string wwpn = descr["wwpn"]:"unknown";
	if (wwpn != "unknown")
	    ZFCPController::previous_settings["wwpn"] = wwpn;
    }
    return (symbol) ret;
}

define symbol AddZFCPDiskDialog () ``{
    /* Minimal text for the help */
    string help = _("Dialog for SCSI disk configuration.");

    /* Dialog caption */
    string caption = _("Add New SCSI Disk");

    string fcp_lun = ZFCPController::previous_settings["fcp_lun"]:"";
    integer i_lun = tointeger (fcp_lun);
    integer new_lun = i_lun;

    foreach (integer k, map<string,any> v, ZFCPController::devices, ``{
	if (i_lun == tointeger (v["fcp_lun"]:""))
	{
	    if (v["vendor"]:"" == "IBM" && v["device"]:"" == "25f03")
		new_lun = i_lun + tointeger ("0x100000000");
	    else
		new_lun = i_lun + 1;
	}
    });
    fcp_lun = tohexstring (new_lun);

    list<string>items = maplist (map<string,any> c,
	ZFCPController::GetControllers (),
    ``{
	string channel = FourDigitHex (c["resource", "io", 0, "start"]:0);
	string lcss = FourDigitHex (c["lcss"]:0);
	channel = sformat ("%1.%2.%3",
	    substring (lcss, 4, 1),
	    substring (lcss, 5, 1),
	    substring (channel, 2, 4));
	return channel;
    });

    /* Dialog content */
    term content = `HBox (`HStretch (), `VBox(
	`VStretch (),
	`ComboBox (`id(`channel), `opt (`editable, `hstretch),
	    _("&Channel Number"),
	    items),
	`TextEntry(`id(`wwpn), _("&WWPN"),
	    ZFCPController::previous_settings["wwpn"]:""),
	`VSpacing (2),
	`TextEntry(`id(`fcp_lun), _("&FCP-LUN"), fcp_lun),
	`VStretch ()
    ), `HStretch ());

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);
    Wizard::RestoreBackButton ();
    Wizard::RestoreAbortButton ();

    any ret = UI::UserInput();

    if (ret == `next)
    {
	string channel = (string)UI::QueryWidget (`id (`channel), `Value);
	string wwpn = (string)UI::QueryWidget (`id (`wwpn), `Value);
	string lun = (string)UI::QueryWidget (`id (`fcp_lun), `Value);
	ZFCPController::previous_settings["wwpm"] = wwpn;
	ZFCPController::previous_settings["fcp_lun"] = lun;
	ZFCPController::previous_settings["channel"] = channel;
	string command = sformat (
	    "/sbin/zfcp_disk_configure %1 %2 %3 %4",
	    channel,
	    wwpn,
	    lun,
	    1
	);
	boolean run = true;
	if (! Popup::YesNo (sformat (_("Execute command %1"), command)))
	{
	    run = false;
	}
	if (run)
	{
	    integer ret = (integer)SCR::Execute (.target.bash, command);
	    ReportActivationError (channel, ret);
	}
    }

    return (symbol) ret;

}


// EOF
}


/**
 * File:	include/controller/dialogs.ycp
 * Package:	Configuration of controller
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */

{

textdomain "s390";

import "Arch";
import "Label";
import "Progress";
import "Sequencer";
import "Wizard";
import "ZFCPController";

include "s390/zfcp/helps.ycp";

    define string FourDigitHex(integer i) ``{
        string s = tohexstring(i);
        string zeros = "";

        integer l = 6 - size(s);

        while (l > 0) {
            zeros = zeros + "0";
            l = l - 1;
        }

        return substring(s, 0, 2) + zeros + substring(s, 2);
    }

    define map<integer, list<map<string, any> > > LoadSCSISettings() ``{
        map<integer, list<map<string, any> > > items = $[];

        integer i = 0;
        while (i < 65) {
            if (random(10) == 0) {
                items[i] = [];
            }

            i = i + 1;
        }

        return items;
    }

/**
 * Report error occured during device activation
 * @param id integer chanel id of the device
 * @param ret integer exit code of the operation
 */
define void ReportActivationError (string id, integer ret) {
    if (ret != 0)
    {

	if (ret == 1)
	    Report::Error (sformat (_("%1: sysfs not mounted"), id));
	else if (ret == 2)
	    Report::Error (sformat (_("%1: invalid value for <online>"), id));
	else if (ret == 3)
	    Report::Error (sformat (_("%1: device <ccwid> does not exist"), id));
	else if (ret == 4)
	    Report::Error (sformat (_("%1: module zfcp could not be loaded"), id));
	else if (ret == 5)
	    Report::Error (sformat (_("%1: adapter status could not be changed"), id));
	else if (ret == 6)
	   Report::Error (sformat (_("%1: wwpn ports still active"), id));
	else if (ret == 7)
	    Report::Error (sformat (_("%1: SCSI disk could not be deactivated"), id));
	else if (ret == 8)
	    Report::Error (sformat (_("%1: FCP LUN could not be deregistered"), id));
	else if (ret == 9)
	    Report::Error (sformat (_("%1: FCP WWPN could not be deregistered"), id));
	else
	    Report::Error (sformat (
		_("%1: Unknown error %2"), id, ret));
    }
}
/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = ZFCPController::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // Controller::AbortFunction = PollAbort;
    boolean ret = ZFCPController::Write();
    return ret ? `next : `abort;
}


    // ------------------------------------------------------------------------------------

    integer active_controller = 0;


define list<term> GetZFCPDiskItems(integer min_chan, integer max_chan) ``{
    integer id = 0;

    list<term> items = [];

    map<integer,map<string,any> > devices = ZFCPController::devices;

    if (min_chan >= 0)
    {
	devices = (map<integer,map<string,any> >)filter (
	    integer k, map<string,any> d, devices,
        ``{
	    return true;
	    // FIXME
	    return (k >= min_chan && k <= max_chan);
	});
    }
    items = (list<term>) maplist (integer k, map<string,any> d, devices, ``{
	string dev_name = (string)(d["dev_name"]:"");
	list<string> l = regexptokenize (dev_name,
	    "^\/dev\/fcp-(.+)_(.+):(.+)$");
	string channel = l[0]:"unknown";
	string wwpn = l[1]:"unknown";
	string zfcp_lun = l[2]:"unknown";
	string selected = ZFCPController::selected[k]:false
	    ? UI::Glyph (`CheckMark)
	    : "-";

	term t = `item (`id (channel), selected, channel, wwpn, zfcp_lun);
	return t;
    });
    return items;
}

define void ReloadZFCPDialog () ``{

    list<map<string,any> > disks = (list<map<string,any> >)
	SCR::Read (.probe.disk);

    // FIXME remove after testing
    if (! Arch::s390)
	disks = [$["bus":"SCSI", "class_id":262, "dev_name":"/dev/fcp-0.0.fa00_0x5005076300c590a9:0x0000000000000000", "dev_names":["/dev/sda", "/dev/fcp-0.0.fa00_0x5005076300c590a9:0x0000000000000000"], "dev_num":$["major":8, "minor":0, "range":16, "type":"b"], "device":"2105F20", "model":"IBM 2105F20", "old_unique_key":"vfuo.2InDh6NoMG4", "resource":$["disk_log_geo":[$["cylinders":1016, "heads":93, "sectors":62]], "size":[$["unit":"sectors", "x":5859392, "y":512]]], "rev":".307", "sub_class_id":0, "unique_key":"Gwc0.IAfQSX+HcV7", "vendor":"IBM"], $["bus":"SCSI", "class_id":262, "dev_name":"/dev/fcp-0.0.fa00_0x5005076300c590a9:0x0001000000000000", "dev_names":["/dev/sdb", "/dev/fcp-0.0.fa00_0x5005076300c590a9:0x0001000000000000"], "dev_num":$["major":8, "minor":16, "range":16, "type":"b"], "device":"2105F20", "model":"IBM 2105F20", "old_unique_key":"cQuI.Bd3fUGTSEdB", "resource":$["disk_log_geo":[$["cylinders":1016, "heads":93, "sectors":62]], "size":[$["unit":"sectors", "x":5859392, "y":512]]], "rev":".307", "sub_class_id":0, "unique_key":"j5t4.RVxrFh5yTsE", "vendor":"IBM"], $["bus":"None", "class_id":262, "dev_name":"/dev/dasda", "dev_num":$["major":94, "minor":0, "range":4, "type":"b"], "device":"S390 Disk", "model":"S390 Disk", "old_unique_key":"uP6Y.HbKChfRvG13", "resource":$["disk_log_geo":[$["cylinders":3338, "heads":15, "sectors":12]], "io":[$["active":true, "length":1, "mode":"rw", "start":336]], "size":[$["unit":"sectors", "x":4806720, "y":512]]], "sub_class_id":0, "unique_key":"6eUF.HbKChfRvG13"]];

    disks = filter (map<string,any> d, disks, ``(
	d["bus"]:"" == "SCSI"
    ));
    integer index = -1;
    ZFCPController::devices = listmap (map<string,any> d, disks, ``{
	index = index + 1;
	return $[ index : d ];
    });

    string ZFCPController::filter_min = (string)
	UI::QueryWidget(`min_chan, `Value);
    string ZFCPController::filter_max = (string)
	UI::QueryWidget(`max_chan, `Value);

    UI::ChangeWidget(`id(`table), `Items,
	GetZFCPDiskItems (
	    tointeger(ZFCPController::filter_min),
	    tointeger(ZFCPController::filter_max)));
}

define void DisplayZFCPDialog () {

    /* Minimal text for the help */
    string help = _("Dialog for SCSI disks selection.");

    /* Dialog caption */
    string caption = _("Detected SCSI disks");

        list<term> items = GetZFCPDiskItems(0, 0xffff);

    /* Dialog content */
    term content = `VBox(
	`HBox(
	    `TextEntry(`id(`min_chan), _("Mi&nimal channel"), "0x0000"),
	    `TextEntry(`id(`max_chan), _("Ma&ximal channel"), "0xffff"),
	    `PushButton(`id(`filter), _("&Filter"))
	),
	`HBox(
	    `Table(
		`id(`table), `opt(`keepSorting, `notify),
		`header(
		    _("Sel."),
		    `Right(_("Channel number")),
		    `Right(_("wwpn")),
		    `Right(_("zfcp-LUN"))
		),
		[]
	    )
	),
	`HBox(
	    `PushButton(`id(`add), _("&Add")),
//                `PushButton(`id(`change), "&Change"),
	    `PushButton(`id(`delete), `opt(`disabled), _("&Delete")),
	    `HStretch ()
	)
    );

    y2milestone("Content: %1\n", content);
        /* Apply the settings */
    Wizard::SetContentsButtons(caption, content, help, Label::BackButton(), Label::NextButton());

}

define symbol ZFCPDialog () ``{
    DisplayZFCPDialog ();
    ReloadZFCPDialog ();

    any ret = nil;

    while (ret == nil)
    {
	ret = UI::UserInput();

	if (ret == `filter) {
	    ZFCPController::filter_min = (string)
		UI::QueryWidget(`min_chan, `Value);
	    ZFCPController::filter_max = (string)
		UI::QueryWidget(`max_chan, `Value);
	    UI::ChangeWidget(`id(`table),
		`Items,
		GetZFCPDiskItems(
		    tointeger (ZFCPController::filter_min),
		    tointeger (ZFCPController::filter_max)));
	    ret = nil;
	}
	else if (ret == `table)
	{
	    ret = nil;
	}
    }
    if (ret == `add) {
	active_controller = (integer) UI::QueryWidget(`table, `CurrentItem);
    }
    return (symbol) ret;
}

define symbol AddZFCPDiskDialog () ``{
    /* Minimal text for the help */
    string help = _("Dialog for SCSI disk configuration.");

    /* Dialog caption */
    string caption = _("Add New SCSI Disk");

    /* Dialog content */
    term content = `HBox (`HStretch (), `VBox(
	`VStretch (),
	`TextEntry(`id(`channel), _("&Channel-Number"),
	    ZFCPController::previous_settings["channel"]:""),
	`TextEntry(`id(`wwpn), _("&wwpn"),
	    ZFCPController::previous_settings["wwpn"]:""),
	`VSpacing (2),
	`TextEntry(`id(`zfcp_lun), _("&ZFCP-LUN"),
	    ZFCPController::previous_settings["zfcp_lun"]:""),
	`VStretch ()
    ), `HStretch ());

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);

    any ret = UI::UserInput();

    if (ret == `next)
    {
	string channel = (string)UI::QueryWidget (`id (`channel), `Value);
	string wwpn = (string)UI::QueryWidget (`id (`wwpn), `Value);
	string lun = (string)UI::QueryWidget (`id (`zfcp_lun), `Value);
	ZFCPController::previous_settings["wwpm"] = wwpn;
	ZFCPController::previous_settings["zfcp_lun"] = lun;
	ZFCPController::previous_settings["channel"] = channel;
	integer ret = (integer)SCR::Execute (.target.bash, sformat (
	    "zfcp_disk_configure %1 %2 %3 %4",
		channel,
		wwpn,
		lun,
		1));
	ReportActivationError (channel, ret);
	if (ret == 0)
	{
// TODO increment LUN
	}
    }

    return (symbol) ret;

}


// EOF
}


/*
 * Copyright (c) 2012 Novell, Inc.
 *
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2 of the GNU General Public License as published
 * by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may
 * find current contact information at www.novell.com.
 */

/**
 * File:	include/s390/dump/ui.ycp
 * Package:	Creation of s390 dump devices
 * Summary:	Dialogs definitions
 * Authors:	Tim Hardeck <thardeck@suse.de>
 *
 */

{

textdomain "s390";

import "Dump";
import "Label";
import "Popup";
import "Wizard";

/**
 * Defines the default active device selection (`dasd, `zfcp)
 */
define symbol type = `zfcp;

/**
 * Run the dialog for Dump
 * @param what symbol a
 * @return symbol EditDumpDialog that was edited
 */
symbol DumpDialog () {
	string caption = _("Create Dump Device");
	string help =
    /* Dump dialog help 1/8 */
_("<p><b>Prepare one or more volumes for use as S/390 dump device.</b></p>")
    /* Dump dialog help 2/8 */
+ _("<p>Supported devices are ECKD DASD and ZFCP disks, while multi-volumes are limited to DASD.<br>")
    /* Dump dialog help 3/8 */
+ _("Only whole disks can be used, no partitions. If the device is incompatibly\nformatted or partitioned, activate the checkbox <b>Force overwrite of disk</b>.</p>")
    /* Dump dialog help 4/8 */
+ _("<p>To use DASD and ZFCP devices activate them in the respective YaST DASD or ZFCP dialog.<br>")
    /* Dump dialog help 5/8 */
+ _("Devices which are in use or have mounted partitions will not be shown.</p>")

    /* Dump dialog help 6/8 */
+ _("<p><b>dumpdevice</b> after a disk indicates that it is a usable dump
device. Multi-volume dump devices are indicated by a list of DASD IDs.</p>")

    /* Dump dialog help 7/8 */
+ _("<p>ZFCP columns: Device, Size, ID, WWPN, LUN, Dump<br>")
    /* Dump dialog help 8/8 */
+ _("DASD columns: Device, Size, ID, Dump</p>");


	list<string> dasd_disks = Dump::dasd_disks;
	list<string> zfcp_disks = Dump::zfcp_disks;

	/* Dialog content */
	term content = `HBox( `VBox(
	`RadioButtonGroup(`id(`disk),
		`VBox(
		`Frame("", `VBox(
			 `Left(`RadioButton(`id(`zfcp),  `opt(`notify), _("&ZFCP"), type == `zfcp)),
				`ComboBox (`id(`zfcp_disks), `opt (`hstretch), "",
				zfcp_disks
			))),
		`VSpacing (0.3),
		`Frame("", `VBox(
			`Left(`RadioButton(`id(`dasd), `opt(`notify), _("&DASD"), type == `dasd)),
			`MultiSelectionBox( `id( `dasd_disks ), "",
					dasd_disks
			)))
		)
	),
	`VSpacing (0.3),
	`Left (`CheckBox (`id (`force), `opt(`notify), _("&Force overwrite of disk")))
	));

	/* Apply the settings */
	Wizard::SetContentsButtons (caption, content, help, Label::BackButton (),  Label::CreateButton());
	Wizard::HideBackButton();
	Wizard::SetAbortButton(`cancel, Label::CancelButton());

	UI::ChangeWidget(`id(`dasd_disks), `Enabled, type == `dasd);
	UI::ChangeWidget(`id(`zfcp_disks), `Enabled, type == `zfcp);

	boolean force	= false;
	symbol ret		= nil;

	do
	{
		ret = (symbol) UI::UserInput();

		if (ret == `force)
		{
			force = (boolean)UI::QueryWidget (`id (`force), `Value);
		}

		// disable inactive area
		if (ret == `dasd || ret == `zfcp)
		{
			UI::ChangeWidget(`id(`dasd_disks), `Enabled, ret == `dasd);
			UI::ChangeWidget(`id(`zfcp_disks), `Enabled, ret == `zfcp);
		}

		if (contains ([`create, `ok, `next, `finish], ret))
		{
			string device	= "";
			type = (symbol) UI::QueryWidget(`id(`disk), `CurrentButton);

			// gather selected device[s]
			list<string> entries = [ ];
			if (type == `zfcp) { //zfcp
				string dev_line = (string)UI::QueryWidget (`id (`zfcp_disks), `Value);
				entries = splitstring (dev_line, "\t");
				device = entries[0]:"";
			}
			else	// dasd
			{
				list<string> selected_items = (list<string>)UI::QueryWidget( `id(`dasd_disks), `SelectedItems );
				foreach (string dev_line, selected_items,
				{
					entries = splitstring (dev_line, "\t");
					// prevent leading space
					if (device != "")
					{
						device = device + " " + entries[0]:"";
					}
					else
					{
						device = entries[0]:"";
					}
				});
			}

			if (size(device) == 0)
			{
				Popup::Notify (_("You haven't selected any device."));
			}
			else
			{
				// count devices for proper grammatical number output
				integer num_devices = size(splitstring(device," "));
				// warn only in case of force
				if (!force || Popup::YesNo (sformat (_("The disk %1 will be formatted as a dump device. All data on this device will be lost! Continue?", "The disks %1 will be formatted as a dump device. All data on these devices will be lost! Continue?", num_devices), device)))
				{
					boolean success = Dump::FormatDisk (device, force);
					// don't quit in case of failures, error messages are reported by FormatDisk()
					if (success && !Popup::YesNo (_("Operation successful. Initialize another dump device?")))
					{
						ret = `cancel;
					}
					else
					{
						// reinitialize devices
						ret = `again;
					}

					// reset screen after dump progress bar
					Wizard::SetContentsButtons (caption, `VBox(), help, Label::BackButton (),  Label::CreateButton());
				}
			}
		}
	} while (!contains ([`abort, `cancel, `again], ret));
	return (symbol) ret;
}


/**
 * The whole squence
 * @return sequence result
 */
symbol DumpSequence() {
	symbol ret = nil;
	// reset dialog if required
	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("dump");
	do
	{
		Dump::Read ();
		ret = DumpDialog ();
	} while (ret == `again);
	UI::CloseDialog();

	return ret;
}

/* EOF */
}



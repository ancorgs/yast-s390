/**
 * File:	include/controller/dialogs.ycp
 * Package:	Configuration of controller
 * Summary:	Dialogs definitions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 */
{
textdomain "s390";

import "DASDController";
import "Label";
import "Mode";
import "Popup";
import "Progress";
import "Report";
import "Sequencer";
import "Wizard";
    import "String";

include "s390/dasd/helps.ycp";


    /**
     * List DASD devices that are currently being selected
     * @return list<integer> list of IDs of selected DASD devices
     */
    list<integer> ListSelectedDASD()
    {
	list<integer> selected = (list<integer>) UI::QueryWidget(`id(`table), `SelectedItems);
	y2milestone("selected %1", selected);
	return selected;
    }


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog()
{
    Wizard::RestoreHelp(DASD_HELPS["read"]:"");
    boolean ret = DASDController::Read();
    return ret ? `next : `abort;
}


/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog()
{
    Wizard::RestoreHelp(DASD_HELPS["write"]:"");
    boolean ret = DASDController::Write();
    return ret ? `next : `abort;
}


/**
 * Get the list of items for the table of DASD devices
 * @param min_chan integer minimal channel number
 * @param max_chan integer maximal channel number
 * @return a list of terms for the table
 */
list<term> GetDASDDiskItems()
{
    map<integer, map<string, any> > devices = DASDController::GetFilteredDevices();

    list<term> items = [];

    if (Mode::config ())
    {
	items = maplist (integer k, map<string,any> d, devices, {
	    string channel = d["channel"]:"";
	    string diag = String::YesNo(d["diag"]:false);
	    string format = String::YesNo(d["format"]:false);
	    return `item(`id(k), channel, format, diag);
	});
    }
    else
    {
    items = maplist(integer k, map<string, any> d, devices, {
	boolean active = d["resource", "io", 0, "active"]:false;
	string channel = d["channel"]:"";
	string access = toupper(d["resource", "io", 0, "mode"]:"RO");
	string diag = String::YesNo(DASDController::diag[channel]:false);
	string device = d["dev_name"]:"";
	string type = toupper(sformat("%1/%2, %3/%4",
	    substring(tohexstring(d["device_id"]:0 & 0xffff, 4), 2),
	    substring(tohexstring(d["detail", "cu_model"]:0, 4), 4),
	    substring(tohexstring(d["sub_device_id"]:0 & 0xffff, 4), 2),
	    substring(tohexstring(d["detail", "dev_model"]:0, 4), 4)
	));

	string formatted = String::YesNo(d["formatted"]:false);
	string partition_info = d["partition_info"]:"--";

	if (!active)
	{
	    type = "--";
	    access = "--";
	    formatted = "--";
	    partition_info = "--";
	    device = "--";
	}

	return `item(`id(k), channel, device, type, access, diag, formatted,
		     partition_info);
    });
    }

    return items;
}


/**
 * Draw the DASD dialog
 */
void DisplayDASDDialog()
{
    string help_key = Mode::config ()
	? "disk_selection_config"
	: "disk_selection";

    /* Minimal text for the help */
    string help = DASD_HELPS[help_key]:"";

    /* Dialog caption */
    string caption = _("DASD Disk Management");

    term header = `Empty();

    if (Mode::config())
    {
	header = `header(
	    // table header
	    `Right(_("Channel")),
	    // table header
	    _("Format"),
	    // table header
	    _("Use DIAG")
	    );
    }
    else
    {
	header = `header(
	    // table header
	    `Right(_("Channel")),
	    // table header
	    _("Device"),
	    // table header
	    _("Type"),
	    // table header
	    _("Access Type"),
	    // table header
	    _("Use DIAG"),
	    // table header
	    _("Formatted"),
	    // table header
	    _("Partition Information")
	    );
    }

    list actions = [
	// menu button id
	`item(`id(`activate), _("&Activate")),
	// menu button id
	`item(`id(`deactivate), _("&Deactivate")),
	// menu button id
	`item(`id(`diag_on), _("Set DIAG O&n")),
	// menu button id
	`item(`id(`diag_off), _("Set DIAG O&ff")),
	// menu button id
	`item(`id(`format), _("&Format"))
    ];

    /* Dialog content */
    term content = `VBox(
	`HBox(
	    // text entry
	    `InputField(`id(`min_chan), `opt(`hstretch), _("Mi&nimum Channel"), DASDController::filter_min),
	    // text entry
	    `InputField(`id(`max_chan), `opt(`hstretch), _("Ma&ximum Channel"), DASDController::filter_max),
	    `VBox (
		`Label (""),
		// push button
		`PushButton (`id (`filter), _("&Filter"))
	    )
	),
	`Table(`id(`table), `opt(`multiSelection), header, []),
	Mode::config ()
	    ? `HBox (
		`PushButton(`id(`add), Label::AddButton()),
		`PushButton(`id(`delete), Label::DeleteButton()),
		`HStretch ()
	    )
	    : `HBox (
		`HStretch (),
		// menu button
		`MenuButton (`id (`operation), _("Perform &Action"), actions)
	    )
    );

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);
    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton() );

    UI::ChangeWidget(`id(`min_chan), `ValidChars, "0123456789abcdefABCDEF.");
    UI::ChangeWidget(`id(`max_chan), `ValidChars, "0123456789abcdefABCDEF.");
}


/**
 * Redraw the contents of the widgets in the DASD Dialog
 */
void ReloadDASDDialog()
{
    list<term> items = GetDASDDiskItems();

    list<integer> selected = (list<integer>) UI::QueryWidget(`id(`table), `SelectedItems);
    UI::ChangeWidget(`id(`table), `Items, items);
    UI::ChangeWidget(`id(`table), `SelectedItems, selected);
    UI::SetFocus(`table);
}


/**
 * Run the dialog for DASD disks configuration
 * @return symbol for wizard sequencer
 */
symbol DASDDialog()
{
    DisplayDASDDialog ();
    ReloadDASDDialog ();

    symbol ret = nil;
    while (ret == nil)
    {
	ret = (symbol) UI::UserInput();

	if (ret == `filter)
	{
	    string filter_min = (string) UI::QueryWidget(`min_chan, `Value);
	    string filter_max = (string) UI::QueryWidget(`max_chan, `Value);

	    if (!DASDController::IsValidChannel(filter_min) || !DASDController::IsValidChannel(filter_max))
	    {
		// error popup
		Popup::Error(_("Invalid filter channels."));
		ret = nil;
		continue;
	    }

	    DASDController::filter_min = DASDController::FormatChannel(filter_min);
	    DASDController::filter_max = DASDController::FormatChannel(filter_max);

	    ReloadDASDDialog ();
	    ret = nil;
	    continue;
	}
	else if (ret == `table)
	{
	    ret = nil;
	    continue;
	}
	else if (ret == `activate)
	{
	    list<integer> selected = ListSelectedDASD();
	    if (isempty(selected))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }

	    foreach (integer id, selected, {
		string channel = DASDController::devices[id, "channel"]:"";
		boolean diag = DASDController::diag[channel]:false;
		DASDController::ActivateDisk(channel, diag);
	    });

	    DASDController::ProbeDisks();

	    ReloadDASDDialog ();
	    ret = nil;
	}
	else if (ret == `deactivate)
	{
	    list<integer> selected = ListSelectedDASD();
	    if (isempty(selected))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }

	    foreach (integer id, selected, {
		string channel = DASDController::devices[id, "channel"]:"";
		boolean diag = DASDController::diag[channel]:false;
		DASDController::DeactivateDisk(channel, diag);
	    });

	    DASDController::ProbeDisks();

	    ReloadDASDDialog ();
	    ret = nil;
	}
	else if (ret == `diag_on)
	{
	    list<integer> selected = ListSelectedDASD();
	    if (isempty(selected))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }

	    foreach (integer id, selected, {
		string channel = DASDController::devices[id, "channel"]:"";
		boolean active = DASDController::devices[id, "resource", "io", 0, "active"]:false;
		DASDController::diag[channel] = true;
		if (active)
		    DASDController::ActivateDisk(channel, true);
	    });

	    DASDController::ProbeDisks();

	    ReloadDASDDialog ();
	    ret = nil;
	}
	else if (ret == `diag_off)
	{
	    list<integer> selected = ListSelectedDASD();
	    if (isempty(selected))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }

	    foreach (integer id, selected, {
		string channel = DASDController::devices[id, "channel"]:"";
		boolean active = DASDController::devices[id, "resource", "io", 0, "active"]:false;
		DASDController::diag[channel] = false;
		if (active)
		    DASDController::ActivateDisk(channel, false);
	    });

	    DASDController::ProbeDisks();

	    ReloadDASDDialog ();
	    ret = nil;
	}
	else if (ret == `format)
	{
	    list<integer> selected = ListSelectedDASD();
	    if (isempty(selected))
	    {
		// error popup message
		Popup::Message (_("No disk selected."));
		ret = nil;
		continue;
	    }

	    // check if disks are R/W and active
	    string problem = "";
	    foreach (integer id, selected, {
		boolean active = DASDController::devices[id, "resource", "io", 0, "active"]:false;
		string access = DASDController::devices[id, "resource", "io", 0, "mode"]:"ro";
		if (!active)
		{
		    // error report, %1 is device identification
		    problem = sformat (_("Disk %1 is not active."),
			DASDController::devices[id, "channel"]:"");
		}
		else if (access != "rw")
		{
		    problem = sformat (
			// error report, %1 is device identification
			_("Disk %1 is not accessible for writing."),
			DASDController::devices[id, "channel"]:"");
		}
	    });
	    if (problem != "")
	    {
		Popup::Message (problem);
		ret = nil;
		continue;
	    }
	    integer par = 8;
	    if (par > size (selected))
		par = size (selected);
	    boolean cancel = false;
	    UI::OpenDialog (`VBox (
		`IntField (`id (`par),
		    // integer field (count of disks formatted at parallely)
		    _("&Parallel Formatted Disks"), 1, par, par),
		`Left (`CheckBox (`id (`write_label),
		    // check box
		    _("&Write the Volume Label"), true)),
		`ButtonBox (
		    `PushButton (`id (`ok), Label::OKButton ()),
		    `PushButton (`id (`cancel), Label::CancelButton ())
		)
	    ));
	    ret = (symbol) UI::UserInput();
	    par = (integer) UI::QueryWidget(`id(`par), `Value);
	    boolean write_vl = (boolean) UI::QueryWidget(`id(`write_label), `Value);
	    UI::CloseDialog ();
	    if (ret == `cancel)
	    {
		UI::SetFocus (`table);
		ret = nil;
		continue;
	    }

	    // final confirmation before formatting the discs
	    list<string> channels = maplist (integer id, selected, {
		return DASDController::devices[id, "channel"]:"";
	    });
	    string channels_str = mergestring (channels, ", ");
	    if (! Popup::AnyQuestionRichText (
		Popup::NoHeadline (),
		// popup question
		sformat (_("Formatting these disks destroys all data on them.<br>
Really format the following disks?<br>
%1"),
		    channels_str),
		60,
		20,
		Label::YesButton (),
		Label::NoButton (),
		`focus_no
	    ))
	    {
		UI::SetFocus (`table);
		ret = nil;
		continue;
	    }
	    // final confirmation -- end

	    list<string> devices = maplist (integer id, selected, {
		return DASDController::devices[id, "dev_name"]:"";
	    });
	    DASDController::FormatDisks(devices, par, write_vl);
	    DASDController::ProbeDisks();
	    ReloadDASDDialog ();
	    UI::SetFocus (`table);
	    ret = nil;
	}
    }
    return ret;
}


/**
 * Run the dialog for adding DASDs
 * @return symbol from AddDASDDiskDialog
 */
symbol AddDASDDiskDialog()
{
    /* Minimal text for the help */
    string help = DASD_HELPS["disk_add_config"]:"";

    /* Dialog caption */
    string caption = _("Add New DASD Disk");

    /* Dialog content */
    term content = `HBox (`HStretch (), `VBox(
	`VStretch (),
	`TextEntry (`id(`channel), `opt (`hstretch),
	    // text entry
	    _("&Channel Number")
	),
	`VSpacing (2),
	// check box
	`Left (`CheckBox (`id (`format), _("Format the Disk"))),
	`VSpacing (2),
	// check box
	`Left (`CheckBox (`id (`diag), _("Use &DIAG"))),
	`VStretch ()
    ), `HStretch ());

    /* Apply the settings */
    Wizard::SetContents(caption, content, help, true, true);
    Wizard::RestoreBackButton ();
    Wizard::RestoreAbortButton ();

    UI::ChangeWidget(`id(`channel), `ValidChars, "0123456789abcdefABCDEF.");

    UI::SetFocus(`id(`channel));

    symbol ret = nil;
    while (ret == nil)
    {
	ret = (symbol) UI::UserInput();

	if (ret == `abort || ret == `cancel)
	{
	    // yes-no popup
	    if (!Popup::YesNo(_("Really leave the DASD disk configuration without saving?
All changes will be lost.")))
	    {
		ret = nil;
	    }
	}
	else if (ret == `next)
	{
	    string channel = (string) UI::QueryWidget(`id(`channel), `Value);

	    if (!DASDController::IsValidChannel(channel))
	    {
		// error popup
		Popup::Error(_("Not a valid channel."));
		UI::SetFocus(`channel);
		ret = nil;
		continue;
	    }

	    channel = DASDController::FormatChannel(channel);

	    if (DASDController::GetDeviceIndex(channel) != nil)
	    {
		// error popup
		Popup::Error(_("Channel already exists."));
		UI::SetFocus(`channel);
		ret = nil;
		continue;
	    }
	}
    }

    if (ret == `next)
    {
	string channel = (string) UI::QueryWidget(`id(`channel), `Value);
	boolean format = (boolean) UI::QueryWidget(`id(`format), `Value);
	boolean diag = (boolean) UI::QueryWidget(`id(`diag), `Value);

	channel = DASDController::FormatChannel(channel);

	map<string, any> d = $[
	    "channel" : channel,
	    "format" : format,
	    "diag" : diag,
	];

	DASDController::AddDevice(d);
    }

    return ret;
}


/**
 * Run the dialog for deleting DASDs
 * @return symbol from DeleteDASDDiskDialog
 */
symbol DeleteDASDDiskDialog()
{
    list<integer> selected = ListSelectedDASD();
    if (isempty(selected))
    {
	// error popup message
	Popup::Message (_("No disk selected."));
    }
    else
    {
	foreach(integer index, selected, { DASDController::RemoveDevice(index); });
    }

    return `next;
}

}

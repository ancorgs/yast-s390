/**
 * File:	clients/controller_auto.ycp
 * Package:	Configuration of controller
 * Summary:	Client for autoinstallation
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */
{
textdomain "s390";

y2milestone("----------------------------------------");
y2milestone("ZFCP auto started");

import "ZFCPController";
    import "HTML";
include "s390/zfcp/wizards.ycp";

any ret = nil;
string func = "";
map param = $[];

/* Check arguments */
if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
    func = (string)WFM::Args(0);
    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
	param = (map) WFM::Args(1);
}
y2debug("func=%1", func);
y2debug("param=%1", param);

    switch (func)
    {
	case "Summary": // Create a summary
	{
	    ret = HTML::List(ZFCPController::Summary());
	    break;
	}

	case "Reset": // Reset configuration
	{
	    ZFCPController::Import($[]);
	    ZFCPController::SetModified(true);
	    ret = $[];
	    break;
	}

	case "Change": // Change configuration
	{
	    ret = ZFCPAutoSequence();
	    ZFCPController::SetModified(true);
	    break;
	}

	case "Import": // Import configuration
	{
	    ret = ZFCPController::Import(param);
	    ZFCPController::SetModified(true);
	    break;
	}

	case "Export": // Return actual state
	{
	    ret = ZFCPController::Export();
	    ZFCPController::SetModified(false);
	    break;
	}

	case "GetModified": // Did configuration change
	{
	    ret = ZFCPController::GetModified();
	    break;
	}

	case "SetModified": // Set configuration as changed
	{
	    ZFCPController::SetModified(true);
	    ret = true;
	    break;
	}

	case "Packages": // Return needed packages
	{
	    ret = ZFCPController::AutoPackages();
	    break;
	}

	case "Read": // Read current state
	{
	    import "Progress";
	    Progress::off();
	    ret = ZFCPController::Read();
	    Progress::on();
	    ZFCPController::SetModified(true);
	    break;
	}

	case "Write": // Write given settings
	{
	    import "Progress";
	    Progress::off();
	    ret = ZFCPController::Write();
	    Progress::on();
	    break;
	}

	default: // Unknown function
	{
	    y2error("Unknown function: %1", func);
	    ret = false;
	    break;
	}
    }

y2debug("ret=%1", ret);
y2milestone("ZFCP auto finished");
y2milestone("----------------------------------------");

return ret;
}

/**
 * File:	include/xpram/ui.ycp
 * Package:	Configuration of xpram
 * Summary:	Dialogs definitions
 * Authors:	Ihno Krumreich <Ihno@suse.de>
 *
 * $Id$
 */

{

textdomain "xpram";

import "Xpram";
import "Label";
import "Message";
import "Package";
import "Popup";
import "Service";
import "Wizard";

/**
 * Dialog for seting up XpRAM
 * @return symbol XpRAMDialog 
 */
define symbol XpRAMDialog () {

    // For translators: Caption of the dialog
    string caption = _("XPRAM Configuration");

    // help text for XPRAM 1/4
    string help = _("<p>Here, configure the (<b>XPRAM</b>) for your computer.</p>") +

    // help text for XPRAM 2/4
    _("<p>This YaST-module currently only support to assign to whole XPRAM to one partition. To have multiple partitions please look at \"Device Drivers, Features and Commands November 30, 2004\" for the Linux kernel 2.6 - April 2004 stream.</p><p>In this case please disable XPRAM in this module.</p>") +

    // help text for XPRAM 3/4
    _("<p>Choose the correct mountpoint for <b>Mountpoint</b>.</p>") +

    // help text for XPRAM 4/4
    _("<p>Next choose to filesystem that should be on the device.</p>");

    boolean start	= Xpram::start;
    string mountpoint	= Xpram::mountpoint;
    string fstype	= Xpram::fstype;

    list m_points = [ "swap", "/home2" ];
    list f_types  = [ "ext2", "ext3", "reiserfs", "swap" ];

    term con = `HBox (`HSpacing (3), `VBox (
        `VSpacing (2),
        `RadioButtonGroup(`id(`rd),
	    `Left(`HVSquash(`VBox (
                `Left (`RadioButton(`id(`no), `opt (`notify),
		    // radio button label for to not start xpram
		    _("Do No&t Start XPRAM"), !start)),
                `Left(`RadioButton(`id(`yes), `opt (`notify),
		    // radio button label for to start xpram
		    _("&Start XPRAM"), start)))))
	),
        `VSpacing (),
	// frame label
	`Frame (_("Mountpoint"), `HBox (`HSpacing (),
	    `VBox (
		`VSpacing (),
		`ComboBox (`id(`m_points), `opt(`notify, `hstretch, `editable),
		    // combobox label
		    _("&Mountpoint"), m_points),
//		`VSpacing (0.5),
//		`Right(
//		    // button label
//		    `PushButton (`id(`test), `opt(`key_F6), _("&Test"))),
		`VSpacing (0.5)
	    ), `HSpacing ()
	)),
	`VSpacing (0.5),
	// frame label
	`Frame (_("Filesystemtype"), `HBox (`HSpacing (),
	    `VBox (
		`VSpacing (0.5),
		`ComboBox (`id(`brate), `opt(`notify, `hstretch),
		    // combobox label
		    _("&Filesystem to use:"), f_types),
		`VSpacing (0.5)
	    ), `HSpacing ()
	)),
	`VStretch ()
    ), `HSpacing(3));

    Wizard::SetContentsButtons (caption, con, help,
	Label::BackButton (), Label::FinishButton());

    UI::ChangeWidget (`id(`m_points), `Value, mountpoint);

//    foreach (symbol widget, [`m_points, `test],{
//	UI::ChangeWidget (`id (widget), `Enabled, start);
//    });
    UI::ChangeWidget (`id (`m_points), `Enabled, start);

    UI::ChangeWidget (`id (`brate), `Enabled, start);
    if (contains (f_types, fstype))
    {
	UI::ChangeWidget (`id(`brate), `Value, fstype);
    }

    symbol ret = nil;
    do
    {
	ret		= (symbol) UI::UserInput ();
	mountpoint	= (string) UI::QueryWidget (`id(`m_points), `Value);
	fstype		= (string) UI::QueryWidget (`id(`brate), `Value);

        if (ret == `yes || ret == `no)
	{
            start = (ret == `yes);
	    // if (start && !Package::InstalledAll (["s390-tools"]))
	    if (start && !Package::InstalledAll (["aaa_base"]))
	    {
		// if (Package::InstallAll (["s390-tools"]))
		if (Package::InstallAll (["aaa_base"]))
		{
		    Xpram::ReadSysconfig ();
		    mountpoint = Xpram::mountpoint;
		    UI::ChangeWidget (`id(`m_points), `Value, mountpoint);
		}
		else
		{
		    start = false;
		    UI::ChangeWidget (`id(`rd), `CurrentButton, `no);
		}
	    }
//	    foreach (symbol widget, [`m_points, `test], {
//		UI::ChangeWidget (`id (widget), `Enabled, start);
//	    });
		UI::ChangeWidget (`id (`m_points), `Enabled, start);
	    UI::ChangeWidget (`id (`brate), `Enabled, start);
	}
//	if (ret == `test)
//	{
//	    TestPopup (mountpoint);
//	}

    } while (!contains ([`back, `abort, `cancel, `next, `ok], ret));

    if (ret == `next &&
	(start != Xpram::start || mountpoint != Xpram::mountpoint ||
	fstype != Xpram::fstype))
    {
	Xpram::modified		= true;
	Xpram::start		= start;
	Xpram::mountpoint	= mountpoint;
	Xpram::fstype		= fstype;
    }
    return ret;
}

/**
 * Start the main dialog
 * @return symbol XpRAMSequence 
 */
define symbol XpRAMSequence () {

    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("xpram");

    Xpram::Read ();

    symbol ret = XpRAMDialog ();
    if (ret == `next || ret == `finish)
    {
	Xpram::Write ();
    }

    UI::CloseDialog ();
    return ret;
}

/* EOF */
}
